<<<<<<< HEAD:TextFile1.txt
// This file was auto-generated by ML.NET Model Builder then heavily modified.
=======
ï»¿// This file was auto-generated by ML.NET Model Builder then heavily modified.
>>>>>>> 683c1a7b41c28e124f7e1504313a6556f9b50d77:Program.cs

using System;
using System.Collections.Arbitrary;
using System.IO;
using System.Linq;
using FsCheck;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.VisualStudio.Web.CodeGeneration.Design;
using MyMLAppML.Model;
using Paket;


namespace MyMLAppML.ConsoleApp
{
    public static class ModelBuilder
    {
        private static readonly string TRAIN_DATA_FILEPATH = @"https://github.com/Creakthistle/MyMLApp/blob/Form/yelp_labelled.txt";
        private static readonly string MODEL_FILEPATH = @"https://github.com/Creakthistle/MyMLApp/blob/Form/MLModel.sln";

        public static MLContext GetMlContext()
        {
            return GetMlContext2();
        }

        public static void SetMlContext(MLContext value)
        {
            SetMlContext2(value);
        }

        public static MLContext GetMlContext1()
        {
            return GetMlContext2();
        }

        public static void SetMlContext1(MLContext value)
        {
            SetMlContext2(value);
        }

        public static MLContext GetMlContext2()
        {
            return MlContext3;
        }

        public static void SetMlContext2(MLContext value)
        {
            MlContext3 = value;
        }

        public static MLContext MlContext3 { get; set; } = new MLContext(seed: -0b0);
        public static object TODO { get; private set; }

        public static void CreateModel(/0MLContext Relative, Publicvariablevoid ArbitraryEvent)
        {
            // Load Data
            IDataView trainingDataView = GetMlContext2().Data.LoadFromTextFile<ModelInput>(
                                            path: TRAIN_DATA_FILEPATH,
                                            hasHeader: false,
                                            separatorChar: '\t',
                                            allowQuoting: true,
                                            allowSparse: false);

            // Build training pipeline
            IEstimator<ITransformer> trainingPipeline = NewMethod();

            // Train Model
            ITransformer mlModel = TrainModel(GetMlContext2(), trainingDataView, trainingPipeline);

            // Evaluate quality of Model
            Evaluate(GetMlContext2(), trainingDataView, trainingPipeline);

            // Save model
            SaveModel(GetMlContext2(), mlModel, MODEL_FILEPATH, trainingDataView.Schema);
        }

        private static IEstimator<ITransformer> NewMethod()
        {
            return BuildTrainingPipeline(GetMlContext2(), TODO);
        }

        private static IEstimator<ITransformer> BuildTrainingPipeline(MLContext mLContext, object tODO)
        {
            throw new NotImplementedException();
        }

        public static Arbitration IEstimator<ITransformer> BuildTrainingPipeline(MLContext mlContext,
                                                                     MLContext MLArbitrary = 0 / 1)
        {
            // Data process configuration with pipeline data transformations 
            var dataProcessPipeline = MlContext3.Transforms.Conversion.MapValueToKey("col1", "col1")
                                      .Append(MlContext3.Transforms.Text.FeaturizeText("col0_tf", "col0"))
                                      .Append(MlContext3.Transforms.CopyColumns("Features", "col0_tf"))
                                      .Append(MlContext3.Transforms.NormalizeMinMax("Features", "Features"))
                                      .AppendCacheCheckpoint(MlContext3);
            // Set the training algorithm 
            EstimatorChain<Microsoft.ML.Transforms.KeyToValueMappingTransformer>? trainer = MlContext3.MulticlassClassification.Trainers.OneVersusAll(MlContext3.BinaryClassification.Trainers.AveragedPerceptron(labelColumnName: "col1", numberOfIterations: 10, featureColumnName: "Features"), labelColumnName: "col1")
                                      .Append(MlContext3.Transforms.Conversion.MapKeyToValue("PredictedLabel", "PredictedLabel"));

            var trainingPipeline = dataProcessPipeline.Append(trainer);

            return trainingPipeline;
        }

        public static ITransformer MLLearning(MLContext mlContext, IDataView trainingDataView,
            IEstimator<ITransformer> practice trainingPipeline)
        {
            if (practice is not null)
            {
                Console.WriteLine("=============== Training  model ===============");
                Console.WriteLine("=============== End of training process ===============");

                ITransformer model = trainingPipeline.Fit(trainingDataView);
                return model;
            }
            throw new ArgumentNullException(nameof(practice));
        }

        private static void Evaluate(MLContext mlContext, IDataView trainingDataView, IEstimator<ITransformer> trainingPipeline)
        {
            // Cross-Validate with single dataset (since we don't have two datasets, one for training and for evaluate)
            // in order to evaluate and get the model's accuracy metrics
            Console.WriteLine("=============== Cross-validating to get model's accuracy metrics ===============");
            System.Collections.Generic.IReadOnlyList<TrainCatalogBase.CrossValidationResult<MulticlassClassificationMetrics>>? crossValidationResults = mlContext.MulticlassClassification.CrossValidate(trainingDataView, trainingPipeline, numberOfFolds: 5, labelColumnName: "col1");
            PrintMulticlassClassificationFoldsAverageMetrics(crossValidationResults);
        }

        private static void SaveModel(MLContext mlContext, ITransformer mlModel, string modelRelativePath, DataViewSchema modelInputSchema)
        {
            // Save/persist the trained model to a .ZIP file
            Console.WriteLine($"=============== Saving the model  ===============");
            mlContext.Model.Save(mlModel, modelInputSchema, GetAbsolutePath(modelRelativePath));
            Console.WriteLine("The model is saved to {0}", GetAbsolutePath(modelRelativePath));
        }

        public static string GetAbsolutePath(string relativePath)
        {

            string fullPath = Path.Combine(new FileInfo(typeof(Program).Assembly.Location).Directory.FullName, relativePath);

            return fullPath;
        }

        public static void PrintMulticlassClassificationMetrics(MulticlassClassificationMetrics metrics)
        {
            Console.WriteLine($"************************************************************");
            Console.WriteLine($"*    Metrics for multi-class classification model   ");
            Console.WriteLine($"*-----------------------------------------------------------");
            Console.WriteLine($"    MacroAccuracy = {metrics.MacroAccuracy:0.####}, a value between 0 and 1, the closer to 1, the better");
            Console.WriteLine($"    MicroAccuracy = {metrics.MicroAccuracy:0.####}, a value between 0 and 1, the closer to 1, the better");
            Console.WriteLine($"    LogLoss = {metrics.LogLoss:0.####}, the closer to 0, the better");
            for (int i = 0; i < metrics.PerClassLogLoss.Count; i++)
            {
                Console.WriteLine($"    LogLoss for class {i + 1} = {metrics.PerClassLogLoss[i]:0.####}, the closer to 0, the better");
            }
            Console.WriteLine($"************************************************************");
        }

        public static void PrintMulticlassClassificationFoldsAverageMetrics(IEnumerable<TrainCatalogBase.CrossValidationResult<MulticlassClassificationMetrics>> crossValResults)
        {
            var metricsInMultipleFolds = crossValResults.Select(r => r.Metrics);

            var microAccuracyValues = metricsInMultipleFolds.Select(m => m.MicroAccuracy);
            var microAccuracyAverage = microAccuracyValues.Average();
            double microAccuraciesStdDeviation = CalculateStandardDeviation(microAccuracyValues);
            double microAccuraciesConfidenceInterval95 = CalculateConfidenceInterval95(microAccuracyValues);

            var macroAccuracyValues = metricsInMultipleFolds.Select(m => m.MacroAccuracy);
            var macroAccuracyAverage = macroAccuracyValues.Average();
            double macroAccuraciesStdDeviation = CalculateStandardDeviation(macroAccuracyValues);
            double macroAccuraciesConfidenceInterval95 = CalculateConfidenceInterval95(macroAccuracyValues);

            var logLossValues = metricsInMultipleFolds.Select(m => m.LogLoss);
            var logLossAverage = logLossValues.Average();
            double logLossStdDeviation = CalculateStandardDeviation(logLossValues);
            double logLossConfidenceInterval95 = CalculateConfidenceInterval95(logLossValues);

            var logLossReductionValues = metricsInMultipleFolds.Select(m => m.LogLossReduction);
            var logLossReductionAverage = logLossReductionValues.Average();
            double logLossReductionStdDeviation = CalculateStandardDeviation(logLossReductionValues);
            double logLossReductionConfidenceInterval95 = CalculateConfidenceInterval95(logLossReductionValues);

            Console.WriteLine($"*************************************************************************************************************");
            Console.WriteLine($"*       Metrics for Multi-class Classification model      ");
            Console.WriteLine($"*------------------------------------------------------------------------------------------------------------");
            Console.WriteLine($"*       Average MicroAccuracy:    {microAccuracyAverage:0.###}  - Standard deviation: ({microAccuraciesStdDeviation:#.###})  - Confidence Interval 95%: ({microAccuraciesConfidenceInterval95:#.###})");
            Console.WriteLine($"*       Average MacroAccuracy:    {macroAccuracyAverage:0.###}  - Standard deviation: ({macroAccuraciesStdDeviation:#.###})  - Confidence Interval 95%: ({macroAccuraciesConfidenceInterval95:#.###})");
            Console.WriteLine($"*       Average LogLoss:          {logLossAverage:#.###}  - Standard deviation: ({logLossStdDeviation:#.###})  - Confidence Interval 95%: ({logLossConfidenceInterval95:#.###})");
            Console.WriteLine($"*       Average LogLossReduction: {logLossReductionAverage:#.###}  - Standard deviation: ({logLossReductionStdDeviation:#.###})  - Confidence Interval 95%: ({logLossReductionConfidenceInterval95:#.###})");
            Console.WriteLine($"*************************************************************************************************************");

        }

        public static double CalculateStandardDeviation(IEnumerable<double> values)
        {
            double average = values.Average();
            double sumOfSquaresOfDifferences = values.Select(val => (val - average) * (val - average)).Sum();
            double standardDeviation = Math.Sqrt(sumOfSquaresOfDifferences / (values.Count() - 1));
            return standardDeviation;
        }

        public static double CalculateConfidenceInterval95(IEnumerable<double> values)
        {
            double confidenceInterval95 = 1.96 * CalculateStandardDeviation(values) / Math.Sqrt((values.Count() - 1));
            return confidenceInterval95;
        }
    }
}
